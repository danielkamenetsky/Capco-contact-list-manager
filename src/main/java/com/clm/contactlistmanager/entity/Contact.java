package com.clm.contactlistmanager.entity;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import jakarta.persistence.*;
import java.util.Date;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;


/**
 * Represents a Contact entity with fields corresponding to contact details.
 * This entity is used to store contact-related information in the database.
*/
 @Entity

@Table(name = "contacts")
public class Contact {
    // Indicates that this field is the primary key of the database table.
    @Id
    // Specifies that this primary key will be generated by the database
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // First name of the contact
    @NotNull(message = "First name cannot be empty")
    @Size(min = 1, max = 100, message = "First name should be between 1 and 100 chars")
    @Column(name = "first_name", nullable = false)
    private String firstName;

    // Last name of the contact
    @NotNull(message = "Last name cannot be empty")
    @Size(min = 1, max = 100, message = "Last name should be between 1 and 100 chars")
    @Column(name = "last_name", nullable = false)
    private String lastName;

    // Phone number of the contact
    @NotNull(message = "Phone number cannot be empty")
    @Size(min = 1, max = 10, message = "Phone number should be between 1 and 10 chars")
    @Column(name = "phone_number", nullable = false)
    private String phoneNumber;

    // Email of the contact
    @NotNull(message = "Email cannot be empty")
    @Size(min = 1, max = 50, message = "Email should be between 1 and 50 chars")
    @Column(name = "email", nullable = false)
    private String email;

    // Address of the contact
    @NotNull(message = "Address cannot be empty")
    @Size(min = 1, max = 150, message = "Address should be between 1 and 150 chars")
    @Column(name = "address", nullable = false)
    private String address;

    // Automatically record the timestamp when a Contact object is created and persisted
    @Temporal(TemporalType.TIMESTAMP)    // Specifies how a time or date field should be stored in the database
    @Column(name = "date_created", updatable = false)   // Prevents updates to the creation timestamp
    @org.hibernate.annotations.CreationTimestamp
    private Date dateCreated;


    // Below are standard getter and setter methods
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Date getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Date dateCreated) {
        this.dateCreated = dateCreated;
    }
}
